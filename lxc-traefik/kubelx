#!/bin/bash

usage()
{
  echo "Usage: kubelx [provision|destroy|shutdown|restart]"
  exit 1
}

NODES="kmaster kworker1 kworker2 kworker3"
WORKERS="kworker1 kworker2 kworker3"

kubeprovision()
{
  # check if we have k8s profile or create one
  lxc profile list | grep -qo k8s || (lxc profile create k8s && cat k8s-profile-config | lxc profile edit k8s)
  echo

  echo "==> Bringing up kmaster"
  lxc launch ubuntu:22.04 kmaster --profile k8s
  sleep 30
  lxc config device add kmaster eth0 nic nictype=bridged parent=br0 name=eth0
  echo "==> Running provisioner script on kmaster"
  lxc config device add kmaster kvm unix-char source=/dev/kvm
  lxc config device add kmaster vhost-net unix-char source=/dev/vhost-net
  lxc config device add kmaster vhost-vsock unix-char source=/dev/vhost-vsock
  lxc config device add kmaster "kmsg" unix-char source="/dev/kmsg" path="/dev/kmsg"
  lxc exec kmaster mkdir /etc/containerd
  lxc file push ./config.toml kmaster/etc/containerd/config.toml
  lxc file push ./crictl.yaml kmaster/etc/crictl.yaml
  lxc exec kmaster mkdir /run/flannel
  lxc file push ./flannel_subnet.env kmaster/run/flannel/subnet.env
  cat bootstrap-kube.sh | lxc exec kmaster bash
  echo

  echo "==> Copying kmaster containers to workers"
  for worker in $WORKERS
  do
    lxc copy kmaster $worker
    lxc start $worker
  done

  echo "==> Running configure script to all nodes"
  echo
  for node in $NODES
  do
    echo "==> Running configure script on $node"

    if [[ $node =~ .*master.* ]]
    then
      cat configure-master.sh | lxc exec $node bash
      lxc file pull $node/joincluster.sh joincluster.sh
    fi
    if [[ $node =~ .*worker.* ]]
    then
      lxc file push joincluster.sh $node/joincluster.sh
      cat configure-worker.sh | lxc exec $node bash
    fi

    echo
  done

  echo "==> Copy config to host"
  lxc file pull kmaster/etc/kubernetes/admin.conf ~/.kube/config

  echo "==> Installing Metallb"
  kubectl get configmap kube-proxy -n kube-system -o yaml | sed -e "s/strictARP: false/strictARP: true/" | kubectl apply -f - -n kube-system
  kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.6/config/manifests/metallb-native.yaml
  sleep 60
  kubectl apply -f metallb/ip-advert.yaml -n metallb-system

  echo "==> Installing Ingress Traefik"
  kubectl create namespace traefik
  kubectl create -f traefik-files/dynu_credentials.yaml
  kubectl create -f traefik-files/nfs_volume_claim.yaml
  helm repo add traefik https://helm.traefik.io/traefik
  helm repo update
  helm upgrade --install traefik traefik/traefik --values=values_pj.yaml --namespace traefik

  echo "==> Installing Rancher"
  kubectl create namespace cattle-system
  kubectl apply -f rancher-files/nfs_volume_claim.yaml
  helm repo add rancher-stable https://releases.rancher.com/server-charts/stable
  helm repo add rancher-latest https://releases.rancher.com/server-charts/latest
  helm repo add jetstack https://charts.jetstack.io
  helm repo update
  kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.7.1/cert-manager.crds.yaml
  helm install cert-manager jetstack/cert-manager --namespace cert-manager --create-namespace --version v1.7.1
  helm upgrade --install rancher rancher-latest/rancher \
     --set hostname=rancher.ooguy.com \
     --namespace cattle-system \
     --set replicas=3 \
     --set ingress.ingressClassName=traefik \
     --set customLogos.enabled=true \
     --set customLogos.volumeName=nfs-rancher-claim \
     --set customLogos.size=128Mi \
     --set bootstrapPassword=admin
  kubectl -n cattle-system rollout status deploy/rancher

  kubectl delete ingress rancher -n cattle-system
  # kubectl create -f ing-resource-rancher.yaml -n cattle-system

  kubectl apply -f rancher-files/traefik-route.yaml

  git reset --hard master
  echo "==> All done"
}

kubedestroy()
{
  for node in $NODES
  do
    echo "==> Destroying $node..."
    lxc delete --force $node
  done
}

kubeshutdown()
{
  for node in $NODES
  do
    echo "==> Shutting down $node..."
    lxc stop $node
  done
}

kuberestart()
{
  for node in $NODES
  do
    echo "==> Restarting $node..."
    lxc start $node
  done
}

case "$1" in
  provision)
    echo -e "\nProvisioning Kubernetes Cluster...\n"
    kubeprovision
    ;;
  destroy)
    echo -e "\nDestroying Kubernetes Cluster...\n"
    kubedestroy
    ;;
  shutdown)
    echo -e "\nShutting down Kubernetes Cluster...\n"
    kubeshutdown
    ;;
  restart)
    echo -e "\nRestarting down Kubernetes Cluster...\n"
    kuberestart
    ;;   
  *)
    usage
    ;;
esac
